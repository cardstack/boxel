diff --git a/lib/crypto/index.js b/lib/crypto/index.js
index b965c8c5bd8b6eb939c2f449a82e22fd83996369..be9560d26d73e671f84104c9c465ba50dc4a4f82 100644
--- a/lib/crypto/index.js
+++ b/lib/crypto/index.js
@@ -1901,10 +1901,14 @@ class Crypto extends _typedEventEmitter.TypedEventEmitter {
     }
     const res = await this.baseApis.uploadKeysRequest(requestBody);
     if (fallbackJson) {
-      this.fallbackCleanup = setTimeout(() => {
+      let timer = setTimeout(() => {
         delete this.fallbackCleanup;
         this.olmDevice.forgetOldFallbackKey();
       }, 60 * 60 * 1000);
+      if (typeof timer.unref === "function") {
+        timer.unref();
+      }
+      this.fallbackCleanup = timer;
     }
     await this.olmDevice.markKeysAsPublished();
     return res;
diff --git a/lib/http-api/utils.js b/lib/http-api/utils.js
index 9115598fd769bad15ed23293a68d617d5dbf21a5..95c28e59d8414dbc0837f5c85c98dd96a80446c8 100644
--- a/lib/http-api/utils.js
+++ b/lib/http-api/utils.js
@@ -30,9 +30,12 @@ limitations under the License.
 // Ponyfill for https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/timeout
 function timeoutSignal(ms) {
   const controller = new AbortController();
-  setTimeout(() => {
+  let timer = setTimeout(() => {
     controller.abort();
   }, ms);
+  if (typeof timer.unref === 'function') {
+    timer.unref();
+  }
   return controller.signal;
 }
 function anySignal(signals) {
diff --git a/lib/sync.js b/lib/sync.js
index f59265e1089ce832c0be8a23aa19813c2d4738cc..08ba0b7304ac8011528f86f3c68af416d83ab076 100644
--- a/lib/sync.js
+++ b/lib/sync.js
@@ -719,7 +719,7 @@ class SyncApi {
    * Invoke me to do /sync calls
    */
   async doSync(syncOptions) {
-    while (this.running) {
+    async function _sync() {
       const syncToken = this.client.store.getSyncToken();
       let data;
       try {
@@ -729,8 +729,8 @@ class SyncApi {
         data = await this.currentSyncRequest;
       } catch (e) {
         const abort = await this.onSyncError(e);
-        if (abort) return;
-        continue;
+        if (abort) return true;
+        return;
       } finally {
         this.currentSyncRequest = undefined;
       }
@@ -747,6 +747,7 @@ class SyncApi {
         nextSyncToken: data.next_batch,
         catchingUp: this.catchingUp
       };
+
       if (this.syncOpts.crypto) {
         // tell the crypto module we're about to process a sync
         // response
@@ -798,6 +799,13 @@ class SyncApi {
         await this.client.store.save();
       }
     }
+
+    const throttledSync = throttle(_sync.bind(this), 1000);
+    let i = 0;
+    while (this.running) {
+      let abort = await throttledSync();
+      if (abort) { return; }
+    }
     if (!this.running) {
       debuglog("Sync no longer running: exiting.");
       if (this.connectionReturnedDefer) {
@@ -1624,6 +1632,68 @@ class SyncApi {
   }
 }
 
+// Polyfill for Promise.withResolvers from https://gist.github.com/lmammino/ef121da874a80d657379a1cd64bf8166
+if (typeof Promise.withResolvers === 'undefined') {
+  Promise.withResolvers = function () {
+    let resolve, reject
+    const promise = new Promise((res, rej) => {
+      resolve = res
+      reject = rej
+    })
+    return { promise, resolve, reject }
+  }
+}
+
+// https://chatgpt.com/share/6734ecfd-cab0-8009-bbb9-b0126ed13d6a
+function throttle(func, wait) {
+  let lastCall = 0;
+  let timeoutId = null;
+  let lastArgs = null;
+  let lastContext = null;
+  let deferred = null;
+
+  const invokeFunc = async (time) => {
+    lastCall = time;
+    const result = func.apply(lastContext, lastArgs);
+    lastArgs = lastContext = null;
+    deferred.resolve(result);
+  };
+
+  const throttled = function(...args) {
+    const now = Date.now();
+    lastArgs = args;
+    lastContext = this;
+
+    const isLeadingCall = lastCall === 0;
+
+    if (isLeadingCall) {
+      deferred = Promise.withResolvers();
+      invokeFunc(now);
+    }
+
+    const remainingTime = wait - (now - lastCall);
+    
+    if (remainingTime <= 0 || remainingTime > wait) {
+      deferred = Promise.withResolvers();
+      if (timeoutId) {
+        clearTimeout(timeoutId);
+        timeoutId = null;
+      }
+      invokeFunc(now);
+    } else if (!timeoutId) {
+      deferred = Promise.withResolvers();
+      timeoutId = setTimeout(() => {
+        timeoutId = null;
+        invokeFunc(Date.now());
+      }, remainingTime);
+    }
+
+    return deferred.promise;
+  };
+
+  return throttled;
+}
+
 // /!\ This function is not intended for public use! It's only exported from
 // here in order to share some common logic with sliding-sync-sdk.ts.
 exports.SyncApi = SyncApi;
