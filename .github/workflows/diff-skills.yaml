name: Diff Skills

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  find-changed-skills:
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          fetch-depth: 0 # Required for git diff to work properly
          ref: ${{ github.event.pull_request.base.ref }} # Checkout the target branch first

      - name: Find changed JSON files
        id: changed-files
        uses: tj-actions/changed-files@2f7c5bfce28377bc069a65ba478de0a74aa0ca32 # 46.0.1
        with:
          files: "**/*.json"
          matrix: true
          base_sha: ${{ github.event.pull_request.base.sha }}

  post-diffs:
    needs: find-changed-skills
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJSON(needs.find-changed-skills.outputs.files) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        if: contains(matrix.file, 'skill')
        with:
          fetch-depth: 0 # Required for git diff to work properly
          ref: ${{ github.event.pull_request.base.ref }} # Checkout the target branch first

      - name: Process skill card changes
        id: process-changes
        continue-on-error: true
        run: |
          # Create a temporary directory for processing
          mkdir -p /tmp/skill-diffs

          FILE="${{ matrix.file }}"

          echo "File:"
          echo $FILE

          echo ""

          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.event.pull_request.head.sha }}"

          echo ""

          # Get the file content from target branch and PR branch
          OLD_CONTENT=$(git show ${{ github.event.pull_request.base.sha }}:$FILE 2>/dev/null || echo "{}")
          NEW_CONTENT=$(git show ${{ github.event.pull_request.head.sha }}:$FILE 2>/dev/null || echo "{}")

          echo "Old content:"
          echo $OLD_CONTENT

          echo ""

          echo "New content:"
          echo $NEW_CONTENT

          echo ""

          # Check if it's a skill card
          IS_SKILL_CARD=$(echo "$NEW_CONTENT" | jq -r '.data.meta.adoptsFrom.module == "https://cardstack.com/base/skill"')

          echo "Is skill card:"
          echo $IS_SKILL_CARD

          if [ "$IS_SKILL_CARD" = "true" ]; then
            # Extract instructions and commands
            OLD_INSTRUCTIONS=$(echo "$OLD_CONTENT" | jq -r '.data.attributes.instructions // ""')
            NEW_INSTRUCTIONS=$(echo "$NEW_CONTENT" | jq -r '.data.attributes.instructions // ""')

            OLD_COMMANDS=$(echo "$OLD_CONTENT" | jq -r '.data.attributes.commands // []')
            NEW_COMMANDS=$(echo "$NEW_CONTENT" | jq -r '.data.attributes.commands // []')

            # Create diffs
            echo "$OLD_INSTRUCTIONS" > /tmp/skill-diffs/old_instructions.txt
            echo "$NEW_INSTRUCTIONS" > /tmp/skill-diffs/new_instructions.txt

            echo "$OLD_COMMANDS" > /tmp/skill-diffs/old_commands.txt
            echo "$NEW_COMMANDS" > /tmp/skill-diffs/new_commands.txt
            # Generate diffs
            INSTRUCTIONS_DIFF=$(diff -u /tmp/skill-diffs/old_instructions.txt /tmp/skill-diffs/new_instructions.txt || true)
            COMMANDS_DIFF=$(diff -u /tmp/skill-diffs/old_commands.txt /tmp/skill-diffs/new_commands.txt || true)

            # Add to results if there are changes
            if [ -n "$INSTRUCTIONS_DIFF" ] || [ -n "$COMMANDS_DIFF" ]; then
              DIFFS+=("### Changes in $FILE")
              if [ -n "$INSTRUCTIONS_DIFF" ]; then
                DIFFS+=("#### Instructions Changes")
                DIFFS+=("\`\`\`diff")
                DIFFS+=("$INSTRUCTIONS_DIFF")
                DIFFS+=("\`\`\`")
              fi
              if [ -n "$COMMANDS_DIFF" ]; then
                DIFFS+=("#### Commands Changes")
                DIFFS+=("\`\`\`diff")
                DIFFS+=("$COMMANDS_DIFF")
                DIFFS+=("\`\`\`")
              fi
            fi
          fi

          # Join the diffs with newlines
          DIFF_CONTENT=$(printf "%s\n" "${DIFFS[@]}")

          echo "Diff content?"
          echo $DIFF_CONTENT

          # Set output
          if [[ -n "$DIFF_CONTENT" ]]; then
            diff_file="$RUNNER_TEMP/skill-card-diff.md"   # $RUNNER_TEMP survives the job
            printf '%s\n' "$DIFF_CONTENT" > "$diff_file"

            # Create truncated content for comment
            if [[ ${#DIFF_CONTENT} -gt 60000 ]]; then
              TRUNCATED_CONTENT="TRUNCATED: see artifact for full diff

              ${DIFF_CONTENT:0:60000}"
            else
              TRUNCATED_CONTENT="$DIFF_CONTENT"
            fi

            # Write maybe-truncated content to a separate file
            diff_comment_file="$RUNNER_TEMP/skill-card-diff-comment.md"
            printf '%s\n' "$TRUNCATED_CONTENT" > "$diff_comment_file"

            echo "diff_file=$diff_file" >> "$GITHUB_OUTPUT"
            echo "diff_comment=$diff_comment_file" >> "$GITHUB_OUTPUT"
          fi

      - name: Create comment if there are changes
        if: steps.process-changes.outputs.diff_file != ''
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const diffPath = '${{ steps.process-changes.outputs.diff_file }}';
            const diffContent = fs.readFileSync(diffPath, 'utf8');

            // (optionally truncate to stay within GitHub’s 65 536-char comment limit)
            const MAX = 60000;
            const bodyText =
              diffContent.length > MAX
            ? diffContent.slice(0, MAX) + '\n\n*(truncated — see artifact for full diff)*'
            : diffContent;
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

            // Check if we already have a comment from this workflow
            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('## Skill Card Changes: ${{ matrix.file }}')
            );

            const commentBody = `## Skill Card Changes: ${{ matrix.file }}\n\n${diffContent}`;

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact if there are changes
        if: steps.process-changes.outputs.diff_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.file }}
          path: ${{ steps.process-changes.outputs.diff_file }}
