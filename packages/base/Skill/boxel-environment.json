{
  "data": {
    "type": "card",
    "attributes": {
      "instructions": "## Switch Submode\n\nIf the user makes a request to change logic, behavior or appearance of a card, this means they want you to make code changes. If you are in interact submode, you need to first switch to code submode before proceeding with the change. Use the switch-submode tool for this. Specify the module that the current card adopts from as the codePath when using this tool to switch to code mode.\n\n## Using Tools\n\nDon't ask for permission to propose tool calls, just propose them.\n\n## Searching Cards By Query\n\n### Query Context and Format\n\nThe Boxel system uses queries in two distinct contexts:\n\n#### 1. **Direct Filter Testing** (Used when testing filters directly)\n```json\n{\n  \"filter\": {\n    // Your filter logic here\n  }\n}\n```\n\n#### 2. **Tool Call Context** (Used with search-cards-by-query tool)\n```json\n{\n  \"name\": \"SearchCardsByQueryCommand_[uniqueId]\",\n  \"attributes\": {\n    \"query\": {\n      \"filter\": {\n        // Your filter logic here\n      }\n    }\n  },\n  \"description\": \"Human-readable description\"\n}\n```\n\n**IMPORTANT:** All queries must use valid JSON format with double quotes for strings and property names.\n\n### Filter Components\n\n#### 1. **Basic Filter Structure**\n\nFor single conditions, place the filter operation directly alongside `on`:\n\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://full-url-to-module\",\n      \"name\": \"CardType\"\n    },\n    \"eq\": {\n      \"fieldName\": \"value\"\n    }\n  }\n}\n```\n\n#### 2. **Filter Operations**\n\n- **`type`**: Filter by card type (includes descendants)\n  ```json\n  \"filter\": {\n    \"type\": {\n      \"module\": \"http://full-url\",\n      \"name\": \"CardName\"\n    }\n  }\n  ```\n\n- **`eq`**: Exact match\n  ```json\n  \"eq\": { \"fieldName\": \"value\" }\n  ```\n\n- **`contains`**: Partial string match\n  ```json\n  \"contains\": { \"fieldName\": \"partial text\" }\n  ```\n\n- **`range`**: Numeric comparisons\n  ```json\n  \"range\": { \"fieldName\": { \"gte\": 10, \"lt\": 20 } }\n  ```\n\n#### 3. **Combining Multiple Conditions**\n\nUse `every` (AND) or `any` (OR) only when combining multiple conditions:\n\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://full-url\",\n      \"name\": \"CardType\"\n    },\n    \"every\": [\n      { \"eq\": { \"status\": \"active\" } },\n      { \"contains\": { \"message\": \"text\" } }\n    ]\n  }\n}\n```\n\n#### 4. **The `on` Context**\n\n- **Single condition**: Place filter operation as sibling to `on`\n- **Multiple conditions**: Use `every`/`any` as sibling to `on`\n- Always required when filtering specific card type fields\n\n#### 5. **Special Patterns**\n\n**Nested fields** - Use dot notation:\n```json\n\"eq\": { \"address.city\": \"Austin\" }\n```\n\n**Null checking** - Use `not` with `eq`:\n```json\n\"not\": { \"eq\": { \"title\": null } }\n```\n\n**Negation**:\n```json\n\"not\": { \"contains\": { \"message\": \"text\" } }\n```\n\n### Module URL Format\n\nWhen specifying modules, use the full URL format:\n- ✅ `\"module\": \"http://localhost:4201/user/realm-name/card-type\"`\n- ❌ `\"module\": \"../card-type\"` (relative paths don't work in queries)\n\n### Sort Property\n\nAdd sorting after your filter. The sort array contains objects with `by` and optional `direction`:\n\n```json\n{\n  \"filter\": { /* your filter */ },\n  \"sort\": [{\n    \"by\": \"fieldName\",\n    \"direction\": \"desc\"  // \"asc\" or \"desc\", default is \"asc\"\n  }]\n}\n```\n\nFor sorting across different card types, you may need to include `on`:\n\n```json\n{\n  \"filter\": { /* your filter */ },\n  \"sort\": [{\n    \"by\": \"fieldName\",\n    \"on\": {\n      \"module\": \"http://full-url\",\n      \"name\": \"CardType\"\n    },\n    \"direction\": \"desc\"\n  }]\n}\n```\n\n### Complete Examples\n\n#### Example 1: Simple text search\n**Direct filter:**\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://localhost:4201/user/environment-and-friends/postcard\",\n      \"name\": \"Postcard\"\n    },\n    \"contains\": {\n      \"message\": \"Golden Gate\"\n    }\n  }\n}\n```\n\n**In tool call:**\n```json\n{\n  \"name\": \"SearchCardsByQueryCommand_abc1\",\n  \"attributes\": {\n    \"query\": {\n      \"filter\": {\n        \"on\": {\n          \"module\": \"http://localhost:4201/user/environment-and-friends/postcard\",\n          \"name\": \"Postcard\"\n        },\n        \"contains\": {\n          \"message\": \"Golden Gate\"\n        }\n      }\n    }\n  },\n  \"description\": \"Find postcards mentioning Golden Gate\"\n}\n```\n\n#### Example 2: Multiple conditions with AND and sorting\n**Direct filter:**\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://localhost:4201/user/environment-and-friends/postcard\",\n      \"name\": \"Postcard\"\n    },\n    \"every\": [\n      { \"eq\": { \"recipientAddress.state\": \"CA\" } },\n      { \"eq\": { \"postageAmount\": 0.68 } }\n    ]\n  },\n  \"sort\": [\n    { \"by\": \"recipientName\", \"direction\": \"asc\" }\n  ]\n}\n```\n\n#### Example 3: OR logic with multiple options\n**Direct filter:**\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://localhost:4201/user/environment-and-friends/postcard\",\n      \"name\": \"Postcard\"\n    },\n    \"any\": [\n      { \"contains\": { \"message\": \"BBQ\" } },\n      { \"contains\": { \"message\": \"sourdough\" } },\n      { \"contains\": { \"message\": \"Pike Place\" } }\n    ]\n  }\n}\n```\n\n### Key Rules for Query Construction\n\n1. **Always use valid JSON** - Double quotes for all strings and property names\n2. **Use full module URLs** - Not relative paths from metadata\n3. **Single conditions** - Place filter operation directly alongside `on`\n4. **Multiple conditions** - Use `every`/`any` arrays\n5. **Test incrementally** - Start with simple queries and add complexity\n6. **Consider the context** - Direct filter vs tool call format\n\n### Common Pitfalls to Avoid\n\n1. ❌ Using single quotes instead of double quotes\n2. ❌ Wrapping single conditions in `every` unnecessarily\n3. ❌ Using relative module paths from JSON metadata\n4. ❌ Forgetting to quote property names in JSON\n5. ❌ Mixing filter context with tool call context\n\n### Domain-Specific Examples\n\n#### CRM: Find active high-value customers\n**Direct filter:**\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://crm.app/customer\",\n      \"name\": \"Customer\"\n    },\n    \"every\": [\n      { \"eq\": { \"status\": \"active\" } },\n      { \"range\": { \"lifetimeValue\": { \"gte\": 10000 } } }\n    ]\n  }\n}\n```\n\n#### CMS: Find recent published articles\n**Direct filter:**\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://cms.app/article\",\n      \"name\": \"Article\"\n    },\n    \"every\": [\n      { \"eq\": { \"status\": \"published\" } },\n      { \"range\": { \"publishDate\": { \"gte\": \"2024-01-01\" } } }\n    ]\n  },\n  \"sort\": [\n    { \"by\": \"publishDate\", \"direction\": \"desc\" }\n  ]\n}\n```\n\n#### FinTech: Find flagged high-value transactions\n**Direct filter:**\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://fintech.app/transaction\",\n      \"name\": \"Transaction\"\n    },\n    \"every\": [\n      { \"range\": { \"amount\": { \"gte\": 10000 } } },\n      { \"eq\": { \"flagged\": true } }\n    ]\n  }\n}\n```\n\n#### Social: Find trending posts by verified users\n**Direct filter:**\n```json\n{\n  \"filter\": {\n    \"on\": {\n      \"module\": \"http://social.app/post\",\n      \"name\": \"Post\"\n    },\n    \"every\": [\n      { \"eq\": { \"author.verified\": true } },\n      { \"range\": { \"likes\": { \"gte\": 1000 } } }\n    ]\n  }\n}\n```\n",
      "commands": [
        {
          "codeRef": {
            "name": "default",
            "module": "@cardstack/boxel-host/commands/switch-submode"
          },
          "requiresApproval": false
        },
        {
          "codeRef": {
            "name": "default",
            "module": "@cardstack/boxel-host/commands/show-card"
          },
          "requiresApproval": false
        },
        {
          "codeRef": {
            "name": "SearchCardsByTypeAndTitleCommand",
            "module": "@cardstack/boxel-host/commands/search-cards"
          },
          "requiresApproval": false
        },
        {
          "codeRef": {
            "name": "SearchCardsByQueryCommand",
            "module": "@cardstack/boxel-host/commands/search-cards"
          },
          "requiresApproval": false
        }
      ],
      "title": "Boxel Environment",
      "description": "Created by the Boxel Team",
      "thumbnailURL": null
    },
    "meta": {
      "adoptsFrom": {
        "module": "https://cardstack.com/base/skill",
        "name": "Skill"
      }
    }
  }
}
