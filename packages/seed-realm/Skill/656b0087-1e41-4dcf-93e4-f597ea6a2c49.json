{
  "data": {
    "type": "card",
    "attributes": {
      "instructions": "Boxel is a platform where people can create Cards, which under the hood are built out of glimmer components and ember.\n\nCards are independent linkable items that get an ID. Fields are contained within cards, so sometimes a user wants a custom field, but usually it's creating a card (derived from CardDef).\n\nUse glimmer templating and typescript for the code. Remember the limitations of logic within glimmer templating code. Basic interaction for editing fields is handled for you by boxel, you don't need to create that (e.g. StringField has an edit template that allows a user to edit the data). Computed fields can support more complex work, and update automatically for you. Interaction (button clicks, filtering on user typed content) may require glimmer & ember functionality (see action and tracked in the example below).\n\nCards you create have three templates. If you do not specify them they are automatically created for you, but users often want custom templates. Each template is a glimmer template and can use ember functionality. These are specified as static in the card definition:\n\nimport {\n  contains,\n  containsMany,\n  linksToMany,\n  field,\n  CardDef,\n  Component,\n} from 'https://cardstack.com/base/card-api';\nimport StringField from 'https://cardstack.com/base/string';\nimport NumberField from 'https://cardstack.com/base/number';\nimport BooleanField from 'https://cardstack.com/base/boolean';\n// Important, this is the tracked decorator\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { fn } from '@ember/helper';\nimport { on } from '@ember/modifier';\n\nexport class MyCustomCard  extends CardDef {\n  static displayName = 'BoxelBuddyGuestList';\n\n  // linksTo and linksToMany \n  @field linkedData = linksToMany(() => AnotherCard);\n\n  // A field that is computed from other data in the card\n @field computedData = contains(NumberField, {\n   computeVia: function (this: MyCustomCard) {\n     // implementation logic here\n     return 1;\n   },\n });\n \n\n\n  // Isolated templates are used when items are viewed on their own. Default to the isolated template\n  static isolated = class Isolated extends Component<typeof this> {\n    // Use tracked and action decorators to be able to use interactivity in the templated\n  @tracked  trackedValue = [];\n  @action interactivity(event: InputEvent) {}\n// Glimmer template goes here, make sure the style tag is at the top level of the template\n<template>\n      <style scoped>\n    </style>\n</template>\n};\n // Embedded is when they appear in other cards\n  static embedded = class Embedded extends Component<typeof this> {\n<template>\n      <style scoped>\n    </style>\n</template>\n};\n\n // Fitted templates should be responsive to the size of the container they appear in\n static fitted = class Fitted extends Component<typeof this> {\n  <template>\n        <style scoped>\n      </style>\n  </template>\n  };\n\n// Edit is for the user editing the data. Use @fields let the field render itself\n  static edit = class Edit extends Component<typeof this> {\n<template>\n<@fields.fieldName />\n    <style>\n    </style>\n</template>\n};\n}\n\n@fields.fieldName lets the field render itself, very useful for editable fields.\n@model.fieldName gets the value out of the field.\n\n\nImportant:\n\n\nIt is extremely important you use the following imports for interactivity:\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\nimport { fn, get } from '@ember/helper';\nimport { on } from '@ember/modifier';\n\nRemember to define a field the following syntax is used:\n\n  @field fieldname = contains(FieldType);\n  @field fieldname = containsMany(FieldType);\n\nAnd for linking to other cards:\n\n  @field fieldname = linksTo(() => CardType);\n  @field fieldname = linksToMany(() => CardType);\n\nYou can ask followups\n\nYou can propose new/improved data structures\n\nWhen writing the glimmer template, ensure that the style tags appear within the template tag, as the last item in them. You should use useful class names and a sensible structure as you build this. Use single quotes for the class names.\n\nWhen writing this, take care to remember ember and glimmer oddities. Accessing a list by index should use this format:\n\n{{(get this.args.model.fieldWithAList index)}}\n\nValues from the model can be directly inserted with\n\n{{this.args.model.fieldName}}\n\nand you can delegate rendering to the field with\n\n<@fields.fieldName />\n\nYou must be careful with the templates, remember glimmer rules. Do not put a dollar sign ($) directly in front of the brackets.\n\nUnless otherwise instructed, use a modern but stylish theme.\n",
      "title": "Cursor Coding",
      "description": "A skill card for use in cursor",
      "thumbnailURL": null
    },
    "meta": {
      "adoptsFrom": {
        "module": "https://cardstack.com/base/skill",
        "name": "Skill"
      }
    }
  }
}
